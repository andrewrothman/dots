#!/bin/sh

# Crockford's Base32 alphabet
abc="0123456789ABCDEFGHJKMNPQRSTVWXYZ"

case "${1:-key}" in
  id) entropy=8 ;;
  pw) entropy=10 ;;
  key) entropy=16 ;;
  ''|*[!0-9]*) echo "Invalid input: must be a number, 'id', or 'pw', or 'key'."; exit 1 ;;
  *) entropy=$1 ;;
esac

# Generate random bytes
hex=$(openssl rand -hex "$entropy")

# Convert hex to binary string
bin=""
i=0
while [ $i -lt ${#hex} ]; do
    byte=$((16#${hex:$i:2}))
    for bit in 7 6 5 4 3 2 1 0; do
        bin="$bin$(( (byte >> bit) & 1 ))"
    done
    i=$((i + 2))
done

# Pad binary string to a multiple of 5 bits
while [ $(( ${#bin} % 5 )) -ne 0 ]; do
    bin="${bin}0"
done

# Encode in Crockford's Base32
out=""
i=0
while [ $i -lt ${#bin} ]; do
    chunk=${bin:$i:5}
    val=$((2#${chunk}))
    out="${out}$(printf %s "$abc" | cut -c $((val + 1)))"
    i=$((i + 5))
done

echo "$out"
